AWSTemplateFormatVersion: 2010-09-09

Resources:
  # # Creating IAM role that allows us to connect through SSM.
  # # With this we avoid creating another instance as a bastion host.
  # HostRoleForSSM:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${AWS::StackName}-EC2-AmazonSSMManagedInstanceCore
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ec2.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  HostRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EC2-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole

  HostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref HostRole
      # Roles:
      #   - !Ref HostRoleForSSM
      InstanceProfileName: !Sub ${AWS::StackName}-HostInstanceProfile

  ASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-LaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt HostInstanceProfile.Arn
        ImageId: ami-0be2609ba883822ec
        InstanceType: t2.micro
        # KeyName: app-private-host-keypair

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 0
      MaxSize: 5
      DesiredCapacity: 0
      LaunchTemplate:
        LaunchTemplateId: !Ref ASGLaunchTemplate
        Version: !GetAtt ASGLaunchTemplate.LatestVersionNumber
      AvailabilityZones:
        - !Select
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      LifecycleHookSpecificationList:
        - LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
          DefaultResult: ABANDON
          HeartbeatTimeout: 120
          LifecycleHookName: !Sub ${AWS::StackName}-LifecycleHookLaunching

Outputs:
  ASGName:
    Description: ASG Name
    Value: !Ref ASG
  ASGLifecycleHookLaunchingName:
    Description: ASG Livecycle Hook Launching Name
    Value: !Sub ${AWS::StackName}-LifecycleHookLaunching










  # LaunchLifecycleHook:
  #   Type: AWS::AutoScaling::LifecycleHook
  #   Properties:
  #     AutoScalingGroupName:
  #       Ref: ASG
  #     LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
  #     DefaultResult: ABANDON
  #     HeartbeatTimeout: 120

  # LambdaRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ${AWS::StackName}-role
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: AllowCompleteLifecycle
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - autoscaling:CompleteLifecycleAction
  #               Resource: !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${ASG}
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # LambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub ${AWS::StackName}-function
  #     Code:
  #       ZipFile: |
  #         import boto3
  #         def check_response(response_json):
  #             try:
  #                 if response_json['ResponseMetadata']['HTTPStatusCode'] == 200:
  #                     return True
  #                 else:
  #                     return False
  #             except KeyError:
  #                 return False
  #         def handle_event(event, context):
  #             print(f"Hello World! ({event['detail-type']})")
  #             message = event['detail']
  #             life_cycle_hook = message["LifecycleHookName"]
  #             auto_scaling_group = message["AutoScalingGroupName"]
  #             instance_id = message["EC2InstanceId"]
  #             asg_client = boto3.client('autoscaling')
  #             try:
  #                 response = asg_client.complete_lifecycle_action(
  #                     LifecycleHookName=life_cycle_hook,
  #                     AutoScalingGroupName=auto_scaling_group,
  #                     LifecycleActionResult='CONTINUE',
  #                     InstanceId=instance_id
  #                     )
  #                 if check_response(response):
  #                     print(f"Lifecycle hook continued correctly: {response}")
  #                 else:
  #                     print(f"Lifecycle hook could not be continued: {response}")
  #             except Exception as e:
  #                 print(f"Lifecycle hook continued could not be executed: {str(e)}")
  #     Handler: index.handle_event
  #     Role: !GetAtt LambdaRole.Arn
  #     Runtime: python3.7
  #     MemorySize: 256
  #     Timeout: 60

  # EventRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: EventRule
  #     EventPattern:
  #       source:
  #         - aws.autoscaling
  #       detail-type:
  #         - "EC2 Instance-launch Lifecycle Action"
  #       detail:
  #         AutoScalingGroupName:
  #           - !Ref ASG
  #         LifecycleHookName:
  #           - !Ref LaunchLifecycleHook
  #     State: ENABLED
  #     Targets:
  #       -
  #         Arn: !GetAtt LambdaFunction.Arn
  #         Id: TargetFunctionV1

  # PermissionForEventsToInvokeLambda:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LambdaFunction
  #     Action: lambda:InvokeFunction
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt EventRule.Arn