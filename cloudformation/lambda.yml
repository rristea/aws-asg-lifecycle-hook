AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ASGName:
    Type: String
    Description: The Autoscaling Group name.
  ASGLifecycleHookLaunchingName:
    Type: String
    Description: The ASG Livecycle Hook Launching Name.

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowCompleteLifecycle
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction
                Resource: !Sub arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${ASGName}
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function
      Code:
        ZipFile: |
          import boto3
          def check_response(response_json):
              try:
                  if response_json['ResponseMetadata']['HTTPStatusCode'] == 200:
                      return True
                  else:
                      return False
              except KeyError:
                  return False
          def handle_event(event, context):
              message = event['detail']
              life_cycle_hook = message["LifecycleHookName"]
              auto_scaling_group = message["AutoScalingGroupName"]
              instance_id = message["EC2InstanceId"]
              print(f"Received event for instance {instance_id}")
              asg_client = boto3.client('autoscaling')
              try:
                  response = asg_client.complete_lifecycle_action(
                      LifecycleHookName=life_cycle_hook,
                      AutoScalingGroupName=auto_scaling_group,
                      LifecycleActionResult='CONTINUE',
                      InstanceId=instance_id
                      )
                  if check_response(response):
                      print(f"Lifecycle hook continued correctly: {response}")
                  else:
                      print(f"Lifecycle hook could not be continued: {response}")
              except Exception as e:
                  print(f"Lifecycle hook continued could not be executed: {str(e)}")
      Handler: index.handle_event
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      MemorySize: 256
      Timeout: 60

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - "EC2 Instance-launch Lifecycle Action"
        detail:
          AutoScalingGroupName:
            - !Sub ${ASGName}
          LifecycleHookName:
            - !Sub ${ASGLifecycleHookLaunchingName}
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt LambdaFunction.Arn
          Id: TargetFunctionV1

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRule.Arn

Outputs:
  LambdaFunctionName:
    Description: Lambda Function Name
    Value: !Ref LambdaFunction
